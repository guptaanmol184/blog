// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: query.sql

package dbconn

import (
	"context"
	"time"
)

const addPost = `-- name: AddPost :one
insert into posts (post_id,title,content,created_at,updated_at) values (?,?,?,?,?) returning post_id, title, content, created_at, updated_at
`

type AddPostParams struct {
	PostID    string
	Title     string
	Content   string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) AddPost(ctx context.Context, arg AddPostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, addPost,
		arg.PostID,
		arg.Title,
		arg.Content,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Post
	err := row.Scan(
		&i.PostID,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const addTag = `-- name: AddTag :one
insert into post_tags (post_id, tag) values (?,?) returning post_id, tag
`

type AddTagParams struct {
	PostID string
	Tag    string
}

func (q *Queries) AddTag(ctx context.Context, arg AddTagParams) (PostTag, error) {
	row := q.db.QueryRowContext(ctx, addTag, arg.PostID, arg.Tag)
	var i PostTag
	err := row.Scan(&i.PostID, &i.Tag)
	return i, err
}

const deleteTags = `-- name: DeleteTags :exec
delete from post_tags where post_id = ?
`

func (q *Queries) DeleteTags(ctx context.Context, postID string) error {
	_, err := q.db.ExecContext(ctx, deleteTags, postID)
	return err
}

const getPost = `-- name: GetPost :one
select post_id, title, content, created_at, updated_at from posts where post_id = ?
`

func (q *Queries) GetPost(ctx context.Context, postID string) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPost, postID)
	var i Post
	err := row.Scan(
		&i.PostID,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPostIds = `-- name: GetPostIds :many
select post_id, updated_at from posts
`

type GetPostIdsRow struct {
	PostID    string
	UpdatedAt time.Time
}

func (q *Queries) GetPostIds(ctx context.Context) ([]GetPostIdsRow, error) {
	rows, err := q.db.QueryContext(ctx, getPostIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostIdsRow
	for rows.Next() {
		var i GetPostIdsRow
		if err := rows.Scan(&i.PostID, &i.UpdatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPosts = `-- name: GetPosts :many
select post_id, title, content, created_at, updated_at from posts order by created_at desc limit ? offset ?
`

type GetPostsParams struct {
	Limit  int64
	Offset int64
}

func (q *Queries) GetPosts(ctx context.Context, arg GetPostsParams) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getPosts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.PostID,
			&i.Title,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostsNoContent = `-- name: GetPostsNoContent :many
select post_id, title, created_at, updated_at from posts order by created_at desc limit ? offset ?
`

type GetPostsNoContentParams struct {
	Limit  int64
	Offset int64
}

type GetPostsNoContentRow struct {
	PostID    string
	Title     string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) GetPostsNoContent(ctx context.Context, arg GetPostsNoContentParams) ([]GetPostsNoContentRow, error) {
	rows, err := q.db.QueryContext(ctx, getPostsNoContent, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostsNoContentRow
	for rows.Next() {
		var i GetPostsNoContentRow
		if err := rows.Scan(
			&i.PostID,
			&i.Title,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostsWithTags = `-- name: GetPostsWithTags :many
select posts.post_id, title, content, created_at, updated_at, tag from posts join post_tags on posts.post_id = post_tags.post_id group by posts.post_id order by created_at desc limit ? offset ?
`

type GetPostsWithTagsParams struct {
	Limit  int64
	Offset int64
}

type GetPostsWithTagsRow struct {
	PostID    string
	Title     string
	Content   string
	CreatedAt time.Time
	UpdatedAt time.Time
	Tag       string
}

func (q *Queries) GetPostsWithTags(ctx context.Context, arg GetPostsWithTagsParams) ([]GetPostsWithTagsRow, error) {
	rows, err := q.db.QueryContext(ctx, getPostsWithTags, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostsWithTagsRow
	for rows.Next() {
		var i GetPostsWithTagsRow
		if err := rows.Scan(
			&i.PostID,
			&i.Title,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Tag,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTags = `-- name: GetTags :many
select tag from post_tags where post_id = ?
`

func (q *Queries) GetTags(ctx context.Context, postID string) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getTags, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var tag string
		if err := rows.Scan(&tag); err != nil {
			return nil, err
		}
		items = append(items, tag)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePost = `-- name: UpdatePost :exec
update posts set post_id = ?,title = ?,content = ?,created_at = ?,updated_at = ? where post_id = ?
`

type UpdatePostParams struct {
	PostID    string
	Title     string
	Content   string
	CreatedAt time.Time
	UpdatedAt time.Time
	PostID_2  string
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) error {
	_, err := q.db.ExecContext(ctx, updatePost,
		arg.PostID,
		arg.Title,
		arg.Content,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.PostID_2,
	)
	return err
}
